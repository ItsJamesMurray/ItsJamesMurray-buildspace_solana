{"ast":null,"code":"var _jsxFileName = \"/Users/jamesmurray/github/buildsoace_solana/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get out program's ID from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Control how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // Constants\n\nconst TWITTER_HANDLE = 'itsjamesmurray';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [gifList, setGifList] = useState([]); // Actions\n  // This function holds the logic for deciding if a Phantom Wallet is connected or not\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }; // Connect to a Solana Phantom Wallet\n\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }; // Send the GIF that a user inputs\n\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n\n    if (inputValue.slice(-4) !== \".gif\") {\n      console.log(\"Not a gif link! Please fix!\");\n      return;\n    }\n\n    console.log(\"GIF link: \", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: walletAddress\n        }\n      });\n      console.log(\"GIF successfully sent to program: \", inputValue);\n      await getGifList();\n    } catch (e) {\n      console.log(\"Error sending GIF: \", e);\n    }\n  };\n\n  const filterGifs = async () => {\n    await getGifList();\n\n    if (filterValue === '') {\n      return;\n    } else {\n      let filteredGifs = [];\n      console.log(\"Filtering for address: \", filterValue);\n\n      for (let i = 0; i < gifList.length; i++) {\n        if (gifList[i].userAddress.toString() === filterValue) {\n          filteredGifs.push(gifList[i]);\n        }\n      }\n\n      setGifList(filteredGifs);\n      return;\n    }\n  }; // Vote GMI on a GIF\n\n\n  async function clickGmiVote(gif_index) {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.gmiVote(gif_index, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: walletAddress\n      }\n    });\n    getGifList();\n  }\n\n  ; // Vote NGMI on a GIF\n\n  async function clickNgmiVote(gif_index) {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.ngmiVote(gif_index, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: walletAddress\n      }\n    });\n    getGifList();\n  }\n\n  ;\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const onFilterChange = event => {\n    const {\n      value\n    } = event.target;\n    setFilterValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount with address: \", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (e) {\n      console.log(\"Error creating BaseAccount account: \", e);\n    }\n  }; // We want to render this UI when the user hasn't connected their wallet to our app yet.\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this); // We want the GIFs rendered when a user is connected with their wallet\n\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization for GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this);\n    } // Otherwise we are good. Account exists. user can submit GIFs\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter gif link!\",\n          className: \"input\",\n          value: inputValue,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: sendGif,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Filter by address...\",\n          className: \"input\",\n          value: filterValue,\n          onChange: onFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: filterGifs,\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"address-text\",\n              children: [\"Submitted by: \", item.userAddress.toString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"vote-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cta-button submit-gmi-button\",\n                onClick: () => clickGmiVote(index),\n                children: [\" \\u2B06\\uFE0F \\uFE0FGMI: \", item.gmiVotes.toString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cta-button submit-ngmi-button\",\n                onClick: () => clickNgmiVote(index),\n                children: [\" \\u2B07\\uFE0F NGMI: \", item.ngmiVotes.toString(), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this);\n    }\n  }; // When our component first mounts, let's check to see if we have a connected Phantom Wallet\n\n\n  useEffect(() => {\n    window.addEventListener('load', async event => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      console.log(\"GIF COUNT: \", account.totalGifs.toString());\n      setGifList(account.gifList);\n    } catch (e) {\n      console.log(\"Error in getGifs: \", e);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83C\\uDF08 WAGMI WALL \\uD83D\\uDC7B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"if we stay positive, we're all gonna make it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with ❤️ by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XYKm77FF1DXquSLjFKedf/bKJbw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jamesmurray/github/buildsoace_solana/frontend/src/App.js"],"names":["useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","kp","SystemProgram","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","filterValue","setFilterValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendGif","length","slice","provider","getProvider","program","rpc","addGif","accounts","user","getGifList","e","filterGifs","filteredGifs","i","userAddress","push","clickGmiVote","gif_index","gmiVote","clickNgmiVote","ngmiVote","onInputChange","event","value","target","onFilterChange","connection","createGifAccount","startStuffOff","wallet","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","map","item","index","gifLink","gmiVotes","ngmiVotes","addEventListener","account","fetch","totalGifs","twitterLogo"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get out program's ID from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Control how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'itsjamesmurray';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  // This function holds the logic for deciding if a Phantom Wallet is connected or not\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Connect to a Solana Phantom Wallet\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // Send the GIF that a user inputs\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    if (inputValue.slice(-4) !== \".gif\") {\n      console.log(\"Not a gif link! Please fix!\")\n      return\n    }\n    console.log(\"GIF link: \", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: walletAddress\n        }\n      });\n      console.log(\"GIF successfully sent to program: \", inputValue)\n\n      await getGifList();\n    } catch (e) {\n      console.log(\"Error sending GIF: \", e)\n    }\n  };\n\n  const filterGifs = async () => {\n    await getGifList()\n    if (filterValue === '') {\n      return\n    } else {\n      let filteredGifs = []\n      console.log(\"Filtering for address: \", filterValue);\n      for (let i = 0; i < gifList.length; i++) {\n        if (gifList[i].userAddress.toString() === filterValue) {\n          filteredGifs.push(gifList[i])\n        }\n      }\n    setGifList(filteredGifs)\n    return\n    }\n  }\n\n  // Vote GMI on a GIF\n  async function clickGmiVote(gif_index) {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.gmiVote(gif_index, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: walletAddress\n        }\n    });\n    getGifList()\n  };\n\n  // Vote NGMI on a GIF\n  async function clickNgmiVote(gif_index) {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.ngmiVote(gif_index, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: walletAddress\n        }\n    });\n    getGifList()\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const onFilterChange = (event) => {\n    const { value } = event.target;\n    setFilterValue(value);\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment\n    );\n    return provider\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount with address: \", baseAccount.publicKey.toString());\n      await getGifList();\n\n    } catch(e) {\n      console.log(\"Error creating BaseAccount account: \", e)\n    }\n  };\n    \n  // We want to render this UI when the user hasn't connected their wallet to our app yet.\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // We want the GIFs rendered when a user is connected with their wallet\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n        <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n          Do One-Time Initialization for GIF Program Account\n        </button>\n        </div>\n      )\n    }\n    // Otherwise we are good. Account exists. user can submit GIFs\n    else {\n      return (\n        <div className=\"connected-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\" \n            className=\"input\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <input\n            type=\"text\"\n            placeholder=\"Filter by address...\" \n            className=\"input\"\n            value={filterValue}\n            onChange={onFilterChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={filterGifs}>\n            Filter\n          </button>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink}/>\n                <p className=\"address-text\">Submitted by: {item.userAddress.toString()}</p>\n                <div className=\"vote-buttons\">\n                  <button className=\"cta-button submit-gmi-button\" onClick={() => clickGmiVote(index)}> ⬆️ ️GMI: {item.gmiVotes.toString()}</button>\n                  <button className=\"cta-button submit-ngmi-button\" onClick={() => clickNgmiVote(index)}> ⬇️ NGMI: {item.ngmiVotes.toString()} </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n  \n  // When our component first mounts, let's check to see if we have a connected Phantom Wallet\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program  = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      console.log(\"GIF COUNT: \", account.totalGifs.toString());\n      setGifList(account.gifList);\n    } catch (e) {\n      console.log(\"Error in getGifs: \", e);\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🌈 WAGMI WALL 👻</p>\n          <p className=\"sub-text\">\n            if we stay positive, we're all gonna make it\n          </p>\n          {/* If not connected, show a button to connect via Phantom */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* If connected, show the GIFs */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with ❤️ by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}